var _sporto$hop$Hop$clearQuery = function (location) {
	return _elm_lang$core$Native_Utils.update(
		location,
		{query: _elm_lang$core$Dict$empty});
};
var _sporto$hop$Hop$removeQuery = F2(
	function (key, location) {
		var updatedQuery = A2(_elm_lang$core$Dict$remove, key, location.query);
		return _elm_lang$core$Native_Utils.update(
			location,
			{query: updatedQuery});
	});
var _sporto$hop$Hop$setQuery = F2(
	function (query, location) {
		return _elm_lang$core$Native_Utils.update(
			location,
			{query: query});
	});
var _sporto$hop$Hop$addQuery = F2(
	function (query, location) {
		var updatedQuery = A2(_elm_lang$core$Dict$union, query, location.query);
		return _elm_lang$core$Native_Utils.update(
			location,
			{query: updatedQuery});
	});
var _sporto$hop$Hop$queryFromAddress = _sporto$hop$Hop_Address$getQuery;
var _sporto$hop$Hop$pathFromAddress = _sporto$hop$Hop_Address$getPath;
var _sporto$hop$Hop$outputFromPath = _sporto$hop$Hop_Out$outputFromPath;
var _sporto$hop$Hop$output = _sporto$hop$Hop_Out$output;
var _sporto$hop$Hop$ingest = _sporto$hop$Hop_In$ingest;
var _sporto$hop$Hop$makeResolver = F3(
	function (config, parse, rawInput) {
		var address = A2(_sporto$hop$Hop$ingest, config, rawInput);
		var parseResult = parse(
			A2(
				_elm_lang$core$String$dropLeft,
				1,
				A2(
					_elm_lang$core$Basics_ops['++'],
					_sporto$hop$Hop$pathFromAddress(address),
					'/')));
		return {ctor: '_Tuple2', _0: parseResult, _1: address};
	});
